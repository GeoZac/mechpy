TITLE: mechpy
AUTHOR: neal gordon Email:nealagordon@gmail.com
DATE: today

a mechanical engineering toolbox

TOC: on

----------
!split

========= mechpy =========
label{chp:intro}

======= Introduction =======

Mechpy was created for few reasons.
 * To provide the practicing engineer with applications or boilerplate code to quickly replicate and solve real-world systems common in mechanical engineering
 * To give the engineering student a code base from which to supplement learning through hand-calculations and an easy way to check work.

There are many different tools available to engineers. Hand-calculations, spreadsheets, and code are all great ways to perform calculations or visualize data or concepts. MATLAB is the defacto tool to solve many engineering calculations, but is just too expensive to be a practical tool for many of us. Octave, Scilab, or Freelab are great alternatives, but is limited in scope to calculation. I began using python for calculations and visualizations and have found it to be a very powerful tool with many existing modules for mathematics and plotting, in addition to the thousands of other libraries for general computing.

To get the source code check out the "github project page":"https://github.com/nagordon/mechpy" <linebreak>
----------
!split

======= Modules =======
label{chp:modules}

__composites.__
(ref{sec:comp})
specialized code to analyze composite plates using classical laminated plate theory
URL:"https://nagordon.github.io/mechpy/composites.html"  <linebreak>

__design.__
(ref{sec:design})
shear-bending diagrams, assisting hand calculations for stress
URL:"https://nagordon.github.io/mechpy/design.html"  <linebreak>

__solids.__
(ref{sec:solids})
URL:"https://nagordon.github.io/mechpy/solids.html"  <linebreak>
URL:"https://nagordon.github.io/mechpy/testing.html"  <linebreak>

__fem.__
(ref{sec:fem})
example code for computing finite element models for analysis and education
URL:"https://nagordon.github.io/mechpy/fem.html"  <linebreak>

__math.__
(ref{sec:math})
various math tools for processing engineering systems
URL:"https://nagordon.github.io/mechpy/math.html"  <linebreak>

__statics.__
(ref{sec:statics})
code for assisting and checking hand calculations
URL:"https://nagordon.github.io/mechpy/statics.html"  <linebreak>

__units.__
(ref{sec:units})
unit conversion
URL:"https://nagordon.github.io/mechpy/units.html"  <linebreak>

__catia.__
(ref{sec:catia})
API code to automate cad in catia

__abaqus.__
(ref{sec:abaqus})
abaqus api interface written in python for automating abaqus fem simulations and reporting.

__dynamics.__
(ref{sec:dynamics})
URL:"https://nagordon.github.io/mechpy/dynamics.html"  <linebreak>


======= Tutorials =======
label{chp:mechtut}
URL:"https://nagordon.github.io/mechpy/plotting.html"  <linebreak>
URL:"https://nagordon.github.io/mechpy/Composite_Plate_Mechanics_with_Python_Example.html"  <linebreak>
URL:"https://nagordon.github.io/mechpy/Composite_Plate_Mechanics_with_Python_Theory.html"  <linebreak>
URL:"https://nagordon.github.io/mechpy/Solving_Differential_Equations_with_Python_mechanical_vibrations.html"  <linebreak>
URL:"https://nagordon.github.io/mechpy/python_optimzation_tutorial.html"  <linebreak>


======= Installation =======

The easiest way to get mechpy is to download it directly from the "mechpy github repository":"https://github.com/nagordon/mechpy/archive/master.zip"

If you are comfortable using "git":"https://git-scm.com/downloads" feel free to clone mechpy with git

!bc bash
git clone https://github.com/nagordon/mechpy.git
!ec

Navigate to the `setup.py` file and run

!bc bash
python setup.py install
!ec

this should add the mechpy module to the python path

----------
!split


========= Python =========
label{chp:introtopython}


======= Getting Started with Python in Engineering =======

For slides, see the "Getting Started with Python in Engineering slides":"https://nagordon.github.io/mechpy/Getting_Started_with_Python_in_Engineering.deckslides.html"

FIGURE: [fig/pythonengineering.png, width=450]

!split
===== Summary =====

* Why python
* Installation
* Help and Documentation
* Python Syntax
 * Comments and Strings
 * Printing
 * Variables and Datatypes
 * Lists and Arrays
 * Indentation and Conditionals
 * Loops
 * Functions
 * Modules
* Numerical Python
 * Arrays
 * Logical Indexing
 * Multi-Dimensional Arrays (matrices)
 * Plotting
* References and Links



!split
===== Why code =====

It's just another tool to solve engineering problems

!bpop
 * Hand calculations are by far the best way to start solving a problem, but not always the best way to find the solution you need.
 * Spreadsheets are a great mix of a database and calculator, but not great at either
 * Databases are the best way to store data, but typically are interfaced with code
 * The best calculators are the ones that work out of the box, but are also 100% customizable
 * diversify skills other than just basic data entry or calculations, such as web design and development, software development, CAD/CAE API development
 * Automate the boring parts of your job with code so you can enjoy the awesome parts
!epop

!split
===== Why python =====

FIGURE: [fig/xkcd-python.png]

!split
===== Why python =====

Python is a general purpose programming language, and is used in web development, graphical user interfaces, IT automation, and SCIENTIFIC COMPUTING

FIGURE: [fig/pythonapps.png, width=600 frac=0.75]

!split
===== Python vs Matlab =====

Matlab is a powerful scientific computing language and software development package that is superior for many mathematical operations, specifically linear algebra, signal processing, and modeling dynamic systems(via Simulink). However, for many engineering applications is not worth the cost. Although many of the Matlab libraries  may be arguably better than comparable python libraries, they are closed source and cannot be modified or inspected by users. Also, sharing code with collaborators or publications requires other users to have licenses.

Python, on the other hand, is a general programming language so it is very good at many tasks, but was not designed exclusively for scientific computing

FIGURE: [fig/pythonvsmatlab.png, width=800 frac=1]


!split
===== Python vs Matlab =====

_Python Positives_
* being easy and fun to learn with great online forumns and open communities
* many libraries for scientific computing, server and desktop management and automation
* works great on Linux, Mac and Windows and easily integrates with other languages (fortran, C, java)
* scripts are easily integrated with other applications
* FREE, open-source and customizable. Every module/library can be modified

_Matlab Positives_
* professional technical support
* fast(er) execution
* being straightforward for simple scientific calculations


!split
===== Installation =====

To get started, choose the python distribution you want. I would recommend anaconda, which has most of the scientific packages that are needed in one installation, but more importantly, comes with a package manager called `conda`, which is a big help when installing and updating python packages (especially on Windows) and "managing environments":"http://conda.pydata.org/docs/using/envs.html" if we want to use multiple versions of python.

* "Anaconda":"https://www.continuum.io/downloads#34" or "Miniconda":"http://conda.pydata.org/miniconda.html" for Linux, Mac, and Windows
* "pyzo":"http://www.pyzo.org/index.html" For Linux, Mac, and Windows
* "winpython":"http://winpython.sourceforge.net/" for Windows
* "python(x,y)":"http://python-xy.github.io/" for Windows

Installing new packages and updating is easy. `conda` takes care of dependencies and version compatibility.

!bc python
# install a single library
conda install numpy

# update a single library
conda update numpy

# update all packages
conda update --all
!ec


!split
===== A Note on Versions =====

Python currently has 2 popular versions, 2x and 3x. 2x has a lot of legacy code still in use, but support is being phased out. Either version works, but I would recommend always trying to default to the latest release (v3.5).

Among many major changes, the two changes I find most troublesome is the print command and division.


_print changes_
!bc pycod
# v2.7
print "hello world"  # hello world

# v3.5
print("hello world")  # hello world
!ec


_division changes_
!bc python
#v2.7
7 / 4
# 1
7 / 4.0
# 1.75
7 // 4
# 1

#v3.5
7 / 4
# 1.75
7 // 4
# 1
!ec

!split
===== Development Environments =====

Python has many options for programming, and graphical user interface development. Many different integrated development environments (IDE), such as spyder. Although not a polished, spyder is similar to the Matlab interface. Browser based jupyter notebooks are a great way to write web-ready content or sharing calculations or plots

FIGURE: [fig/jupyterspyder.png, width=800]


!split
===== First Program =====

Before we go any further, let's put together a simple python script and run it. First, open a text file and type

@@@CODE src/hello.py

save it as `hello.py`. Now, lets open a command window. In windows, my preferred way is to shift+right-click in a window and select _open in terminal_. The other option is to run `cmd` from the start menu. Type the following and hit enter.

!bc sys
python hello.py
!ec

!bpop
!bc
hello world
!ec
!epop

You should have seen your print statement printed to the console. If so, congratulations!, you have executed your first python program. Some other ways to run your program are through the ipython interpreter, which can be launched from your command line by running `ipython` or using the ipython install shortcut

!bc python
In [1]: run hello.py
!ec

!bpop
!bc
hello world
!ec
!epop


!split
===== Help and Documentation =====

if help is ever needed, for example of the math module, in the ipython console, type

!bc python
help(print)
#or
print?
!ec

!bpop
!bc
Help on built-in function print in module builtins:

print(...)
    print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)

    Prints the values to a stream, or to sys.stdout by default.
    Optional keyword arguments:
    file:  a file-like object (stream); defaults to the current sys.stdout.
    sep:   string inserted between values, default a space.
    end:   string appended after the last value, default a newline.
    flush: whether to forcibly flush the stream.
!ec
!epop

!bpop
For anything else, there is a handy company on the internet that is good at finding stuff.
!epop


!split
===== Comments and Strings =====

Making notes or comments in code can be more important than the code itself. If the program is so obscure, hard to read, or confusing, it will not be enjoyable to use, or if it breaks, it will be terrible to repair. Comments should contain info about the command or variable and  can be on the same row as a command or be on a new line. Also, it is good practice to include a short description at the beginning of your functions called a _docstring_. Using these can make documentation much easier. Oneline comments are simply prefixed with `#`, and strings can either be enclosed with *'single'* or *"double"* quotes.

!bc python
# this is a comment, it is not executed
# every new line of a comment must have a #
!ec

!bc python
'''this is a single line docstring with single quotes'''
!ec

!bc python
"""this is a single line docstring with double quotes"""
!ec

!bc python
'''this is a multi-line string or comment enclosed
with 3 single quotes. This is an easy way
to create a multi-line comment, or a docstring at
the beginning of your functions'''
!ec

!split
===== String Pitfalls =====

One troublesome feature of using a cross-platform language like python is dealing with the difference between operating systems. One frustrating difference is the filepath separators. Linux/MAC use the forwardslash `/`,and windows uses the backslash`\\`. In python, the backslash has a different function, it is an escape character, so the windows file paths need `C:\mydir` must be written as `C:\\mydir` or as a forward-slash `C:/mydir` in python

!bc python
print('newline escape  \n example with \n another linebreak')
!ec

!bpop
!bc
newline escape
example with
another
!ec
!epop

!bc python
print('C:\myname\mydirectory\')
!ec
!bpop

!bc
SyntaxError: EOL while scanning string literal
!ec
!epop

One solution to this error is to use double quotes `\\`, in Windows
!bc python
# double slash escapes the first
print('C:\\myname\\mydirectory\\')
!ec
!bpop

!bc
C:\\myname\\mydirectory\\
!ec
!epop

!split
===== Printing =====

The simplest way to print a statement with some variables is to simple create groups of strings separated by commas and inserting variables in the middle. This is easy, but controlling output is difficult.

!bc python
# single line string
print('this is a string')
# single line string with a line break
print('this is a \
       string')
!ec

!bpop
!bc
this is a string
!ec
!epop

!bc python
# the simplest way to print
x = 1/3
print(x,' spam and ',3,' eggs')
!ec

!bpop
!bc
0.3333333333333333  spam and  3  eggs
!ec
!epop

!bc python
# or force integers and floats to be a string and concatenate
print(str(x)+' spam and '+str(3)+' eggs')
!ec

!bpop
!bc
0.3333333333333333  spam and  3  eggs
!ec
!epop

!bc pycod
#The legacy printing variables syntax follows a percent sign and the datatype
print('%i spam and %f %s' % (5.0, 3,'eggs') )
!ec

!bpop
!bc
5 spam and 3.000000 eggs
!ec
!epop

!split
===== Advanced Printing =====

The preferred method for printing is using the format dot operator. This format allows full control on how the information is displayed. The current syntax for printing variables uses the `.format` dot operator


!bc pycod
# basic print with 2 variables
print('{} spam and {} {}'.format(5,3,'eggs'))
!ec

!bpop
!bc
5 spam and 3 eggs
!ec
!epop


!bc pycod
# designating float data type
print('{:f} cans of {}'.format(1/3, 'spam'))
!ec

!bpop
!bc
0.333333 cans of spam
!ec
!epop


!bc pycod
# scientific notation with 2 digits
print('{:.2e} cans of {}'.format(12345689, 'spam'))
!ec

!bpop
!bc
1.23e+07 cans of spam
!ec
!epop


!bc pycod
# 2 digits and pad 6 places with zeros
print('{:06.2f} cans of {}'.format(3.141592653589793, 'spam'))
!ec

!bpop
!bc
003.14 cans of spam
!ec
!epop


!split
===== Variables and Datatypes  =====

 Everything in python is an object, meaning a variable can be a simple text string to a huge nxm array of complex numbers and they all have properties specific to them.
 Python has dynamic typing, or duck typing ("walks like a duck, sounds like a duck, must be a duck"). It takes a guess at what kind of data you are trying to store

!bc python
x=1
type(x)
!ec

!bpop
!bc
int
!ec
!epop


!bc python
y=1.5
type(y)
!ec

!bpop
!bc
float
!ec
!epop


!bc python
y='spam'
type(y)
!ec

!bpop
!bc
string
!ec
!epop


!bc python
z = [1,2,3,4]
type(z)
!ec

!bpop
!bc
list
!ec
!epop

!split
===== Lists and Arrays =====

Lists are a standard, python datatype for storing and processing strings and numbers. A list can contain different datatypes. Arrays are not a standard python datatype, but can be imported from the numerical python library, numpy. Arrays can only hold one type of data, but are optimized for numerics(see section ref{sec:arrays} for demo).

!bc python
# define a list with int and string datatype
z = [1,2,3,4, 'five']
# prints the list
z
!ec

!bpop
!bc
[1,2,3,4, 'five']
!ec
!epop

Parts of a list can be sliced out of a list using the indices
!bc python
# return the first element of the list
z[0]
!ec

!bpop
!bc
1
!ec
!epop


!bc python
# return the last element of the list
z[-1]
!ec

!bpop
!bc
'five'
!ec
!epop


!bc python
# return the 3rd and 4th element of the list.
z[2:5]
!ec

!bpop
!bc
[3,4,'five']
!ec
!epop

!split
===== More Lists =====

Since lists are so useful, lets do a few more examples.

!bc python
mylist = [[1],[2,3],[4,5,6]]
# extract second element of the list
mylist[1]
!ec

!bpop
!bc
[2,3]
!ec
!epop


!bc python
# add on to the end of a list
mylist.append([0,1,2])
# print list
mylist
!ec

!bpop
!bc
[[1], [2, 3], [4, 5, 6], [0, 1, 2]]
!ec
!epop


!bc python
# delete element two
del mylist[1]
print(mylist)
!ec

!bpop
!bc
[[1], [4, 5, 6], [0, 1, 2]]
!ec
!epop


!bc python
# returns the len of the list
len(mylist)
!ec

!bpop
!bc
3
!ec
!epop

!split
===== List and Array Pitfalls =====

Reassigning lists can be dangerous business with unexpected results. If you are used to Matlab syntax, the following example is a reasonable way to create a copy of list x named y

!bc python
# create list x
x = [1,2,3]
# create another list y of the same values as x
y = x
# reassigned the 2 list location with 7
x[1] = 7
print('x =',x)
print('y =',y)
!ec

!bpop
!bc
x = [1,7,3]
y = [1,7,3]
!ec
!epop


!bpop

Notice anything strange? Changing x also changes y! If that is what you expected, then you are probably a computer scientist or something. Making this mistake can lead to weird behavior, so be careful.

!epop

!bpop
!bc python
# The correct way to create variable y
x = [1,2,3]
y = x.copy()
x[1] = 7
print('x =',x)
print('y =',y)
!ec
!epop

!bpop
!bc
x = [1,7,3]
y = [1,2,3]
!ec
!epop

!bpop
That makes more sense, although it's a bit cumbersome. Oh well :(
!epop

!split
===== Indentation and Conditionals =====

Unlike many other languages that use brackets to enclose commands, python uses the whitespace to control the program flow. For example, if statements, loops, and functions are indented 4 spaces to indicate what code is in the function. Once the indent is removed, the code is no longer in the function. This forces a clean, readable coding style. For boolean _is_ or _==_, or binary _0_ , _1_ or logical _True_ or _False_ .

!bc python
# typical if-else. Can remove the else for just an if statement
x = True
if x:
    print('x is true')
else:
    print('x is not true')
!ec

!bpop
!bc
x is true
!ec
!epop

!bc python
# typical if-elif-else
x = 'maybe'
if x:
    print('x is true')
elif x=='maybe':
    print('x is maybe true')
else:
    print('x is not true')
!ec

!bpop
!bc
x is true
!ec
!epop

!bc python
# Python also has clean syntax for one-liners
x = 0
s = 'x is true' if x is True else 'x is not true'
print(s)
!ec

!bpop
!bc
x is not true
!ec
!epop

!split
===== Loops =====

Loops in python are a great way to iterate through a list, perform element-wise calculations, or for sorting data. Here are a few examples of  _for_ and _while_ loops. In python, it is preferred to loop through a list as compared to generating an index array, but both work fine.

!bc python
# typical for loop
x = []
for i in range(10):
    x.append(i)
print('x =',x)
!ec

#<iframe width="800" height="500" frameborder="0" src="http://pythontutor.com/iframe-embed.html#code=x%20%3D%20%5B%5D%0Afor%20i%20in%20range(10%29%3A%0A%20%20%20%20x.append(i%29%0Aprint('x%3D',x%29&codeDivHeight=400&codeDivWidth=350&cumulative=false&curInstr=23&heapPrimitives=false&origin=opt-frontend.js&py=3&rawInputLstJSON=%5B%5D&textReferences=false"> </iframe>

!bpop
!bc
x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
!ec
!epop

Notice the print statement in the previous code snippet. It is unindented from the for loop, indicating it is executed after the for-loop is complete. Below, is another example of a one-liner for loop, which is called a _list comprehension_
!bc python
x = [y for y in range(10)]
x
!ec

!bpop
!bc
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
!ec
!epop

A while loops requires a little more work, but is handy when the number of loops is unknown.

!bc python
i = 0 ; x = []
while i < 10:
    x.append(i)
    i=i+1  # i+=1
print(x)
!ec
!bpop

!bc
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
!ec
!epop

!split
===== Functions =====

The bread-and-butter of any language are creating custom user-defined functions. This compartmentalizes code to reusable chunks. Simple functions can be defined as a one-liner *lambda* function. This example creates a function *myfunc* with two inputs, *x* and *y* which looks like  *myfunc(x,y)*

!bc pycod
# lambda functions are one-liner function definitions
myfunc = lambda x,y: x**2 / y
!ec

For more complicated functions with docstrings, the following example performs the same calculation

!bc python
# another way to define a function with the docstring
def myfunc(x,y):
    '''neat two variable function to do some math'''
    z = x**2 / y
    return z
!ec

Here is an example of calling the function

!bc python
a = myfunc(5,3)
print(a)
!ec

!bpop
!bc
8.333333333333334
!ec
!epop

!split
===== Using Modules =====

Since python is a generic programming language, it does not have math operations built in, they must be imported from modules. Modules are simply a _*.py_ file that has lots of functions that can be used in any other script if it is imported. Imports are typically done at the beginning of a script, but can be done at anytime, as a long as it is before you call the function. The concept of namespace and reserved names is very important when naming variables and importing modules. Ensure you do not name variables or modules the same as any reserved names, such as `list`, `type`, `print`.



!bc python
# Least confusing way to import modules
import numpy
numpy.sin(numpy.pi / 45)
!ec

!bpop
!bc
0.069756473744125302
!ec
!epop

You can also import the entire module but as an alias, in this case _np_. This is the preferred option because all the numpy functions are imported and available, but will not overwrite other functions with the same name.

!bc python
# Less confusing and convientient way to import a whole module
import numpy as np
np.sin(np.pi/45)
!ec

!bpop
!bc
0.069756473744125302
!ec
!epop

Individual functions can be imported which is safe, but can be laborious if many functions are required
!bc python
# safe but cumbersome way to import modules
from numpy import sin, pi
sin(pi/45)
!ec

!bpop
!bc
0.069756473744125302
!ec
!epop

The easiest but riskiest method of module import is importing all functions directly into the main namespace. For complex programs, this can be dangerous unless you know every single module name in the numpy library, because you can overwrite other functions that you may have imported previous.

!bc python
# most convientient but most dangerous way to import modules
from numpy import *
sin(pi/45)
!ec

!bpop
!bc
0.069756473744125302
!ec
!epop

!split
===== Creating Modules =====

For many calculations, importing existing modules like `numpy` or `scipy` is sufficient, but you may eventually need to define your own, custom module. Let's make a custom module. Open a text editor and enter the function we made earlier. Save it as `mymodule.py`

!bc python
# another way to define a function with the docstring
def myfunc(x,y):
    '''neat two variable function to do some math'''
    z = x**2 / y
    return z

# to execute function, call it
myfunc(5,3)
!ec

!bpop
!bc
8.333333333333334
!ec
!epop

Save the file named as `mymodule.py`. Ensuring your console is in the same directory as your file, (`pwd` to check), lets first execute the function then import and use as a custom module.

The function is called in the script so we should see output when we run the file.
!bpop
!bc
8.3333333
!ec
!epop

To import from a module and use the function, use the following code.

!bc python
from mymodule import myfunc
myfunc(1,2)
!ec

!bpop
!bc
8.3333333
!ec
!epop

!split
===== Basic Python Example =====

Let's wrap up our introductory tutorial by doing using a few of the examples together. All of these functions perform the same task, but use slightly different python syntax. We want all the numbers divisible by 5 up to our input y. The example shows how to do this using a for loop, while loop, list comprehension, and a numpy array. This example also shows that there are many ways to solve the same problem.

!bc python
from numpy import array

def divby5_1(y=100):
    '''for loop with if conditional and modulo operator, %'''
    x = []
    for k in range(1,y):
        if k%5 == 0:
            x.append(k)
    return x

def divby5_2(y=100):
    '''while loop with if conditional, and modulo operator, %'''
    x=[] ; z=1
    while z <= y:
        if k%5 == 0:
            x.append(k)
        z = z + 1  # z+=1
    return z

def divby5_3(y=100):
    ''' python list comprehension and modulo operator, %'''
    x = [k for k in range(1,y) if k%5==0]
    return x

def divby5_4(y=100):
    '''numpy logical indexing with modulo operator, %'''
    x = array(range(1,y))
    i = x%5==0    # logical index array
    return x[i]
!ec

Since we provided a default value in the function with `y=100`, we can call the function without an input like so

!bpop
!bc python
divby5_4()
!ec
!epop

!bpop
!bc
array([ 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95])
!ec
!epop

!split
===== Ipython Handy Hints =====

When using the command line, there are a few commands that are very handy. The first is the `cd` or change directory command is used to navigate directories.

!bc python
# change directory to mydir
cd mydir
# go up one directory towards the root
cd ..
!ec

Another handy command is `pwd`, or print working directory which is self-explanatory
!bc
pwd
!ec

!bpop
!bc
C:/user/myproject
!ec
!epop

use `whos` to see variables in current console

!bc python
%whos
!ec

!bpop
!bc
Variable   Type                          Data/Info
--------------------------------------------------
a          float                         8.333333333333334
array      builtin_function_or_method    <built-in function array>
divby5_1   function                      <function divby5_1 at 0x7f2ab8e10a60>
divby5_2   function                      <function divby5_2 at 0x7f2ab8e10c80>
divby5_3   function                      <function divby5_3 at 0x7f2ab80639d8>
divby5_4   function                      <function divby5_4 at 0x7f2ab8042378>
i          int                           10
myfunc     function                      <function myfunc at 0x7f2ab8e7d598>
mylist     list                          n=4
x          list                          n=10
y          list                          n=3
z          list                          n=5
!ec
!epop

If there are undesired variables, use the general `reset` command or specify varaible `del x` to clear variables in the current namespace. It is also helpful to try and keep scripts in functions to prevent your namespace from becoming cluttered

!bc python
# removes a single variable from namespace
del x

# clears all variables from current namespace
%reset
!ec


!split
===== Numerical Python =====

Although python was not originally intended to be a numerical language, it's helpful community, simple syntax, and free, open-source codebase lend it to being a great academic and applied language for theoretical math to physics and engineering calculations.

FIGURE: [fig/scipy.png, width=600 frac=0.75]

!split
===== Arrays =====
label{sec:arrays}

Numpy arrays are similar to lists, but can only contain one datatype, but capable of N-dimensional arrays(or matrices) . Arrays and are optimized for numerics and linear algebra. Arrays are around 30x faster than lists.

*Note* - numpy does have a matrix class which was designed for linear algebra, but it is recommended to use the array class to avoid confusion when performing calculations.

!bc python
# make sure to import the functions you need
from numpy import array, arange, linspace, sin
# If you need more functions, import the whole module
import numpy as np

# using the range function to create a numpy array
x = array(range(10))
print('x = ',x, 'as a',x.dtype)
!ec

!bpop
!bc
x =  [0 1 2 3 4 5 6 7 8 9] as a int64
!ec
!epop

!bc python
# using numpy function arange
x = arange(10)
print('x = ',x, 'as a',x.dtype)
!ec

!bpop
!bc
x =  [0 1 2 3 4 5 6 7 8 9] as a int64
!ec
!epop

!bc python
# numpy array
x = linspace(0,9,10)
print('x = ',x, 'as a',x.dtype)
!ec

!bpop
!bc
x =  [ 0.  1.  2.  3.  4.  5.  6.  7.  8.  9.] as a float64
!ec
!epop

!split
===== Array Operations =====

Element-wise operations
!bc python
# element-wise array multiplcation
x*3
!ec


!bpop
!bc
array([  0.,   3.,   6.,   9.,  12.,  15.,  18.,  21.,  24.,  27.])
!ec
!epop


!bc python
# element-wise array exponentiation
x**2
!ec

!bpop
!bc
array([  0.,   1.,   4.,   9.,  16.,  25.,  36.,  49.,  64.,  81.])
!ec
!epop


# element-wise array trigonometry functions
!bc python
sin(x)
!ec

!bpop
!bc
array([ 0.        ,  0.84147098,  0.90929743,  0.14112001, -0.7568025 ,    -0.95892427, -0.2794155 ,  0.6569866 ,  0.98935825,  0.41211849])
!ec
!epop


!split
===== Array Operations =====

Often, objects in python have many methods that can be performed on that data-type. To see what methods are available, a `.` can be typed to see what is available or the `dir()` function can be used

!bc python
# show all methods available for variable/object x
print([k for k in dir(x) if k[:2] != '__' ])
!ec

!bpop
!bc
['T', 'all', 'any', 'argmax', 'argmin', 'argpartition', 'argsort',\ 'astype', 'base', 'byteswap', 'choose', 'clip', 'compress', 'conj',\ 'conjugate', 'copy', 'ctypes', 'cumprod', 'cumsum', 'data', 'diagonal',\ 'dot', 'dtype', 'dump', 'dumps', 'fill', 'flags', 'flat', 'flatten',\ 'getfield', 'imag', 'item', 'itemset', 'itemsize', 'max', 'mean', 'min',\ 'nbytes', 'ndim', 'newbyteorder', 'nonzero', 'partition', 'prod', 'ptp',\ 'put', 'ravel', 'real', 'repeat', 'reshape', 'resize', 'round',\ 'searchsorted', 'setfield', 'setflags', 'shape', 'size', 'sort',\ 'squeeze', 'std', 'strides', 'sum', 'swapaxes', 'take', 'tobytes',\ 'tofile', 'tolist', 'tostring', 'trace', 'transpose', 'var', 'view']
!ec
!epop

# array methods
!bc python
# using method sum for variable x
x.sum()
# also use the sum function from the numpy module
np.sum(x)
!ec

!bpop
!bc
45
!ec
!epop


!split
===== Logical Indexing =====

A powerful filtering technique in Matlab and python called logical indexing is a great way to perform calculations to specific numbers or filter data

!bc python
# logical indexing
3 < x
!ec

!bpop
!bc
array([False, False, False, False,  True,  True,  True,  True,  True,  True], dtype=bool)
!ec
!epop

!bc python
# negate logical index
~(3 < x)
!ec

!bpop
!bc
array([ True,  True,  True,  True, False, False, False, False, False, False], dtype=bool)
!ec
!epop

!bc python
# and logical index operator
(3 < x) & (x < 5)
!ec

!bpop
!bc
array([False, False, False, False,  True, False, False, False, False, False], dtype=bool)
!ec
!epop

!bc python
# or logical index operator
(3 < x) | (x < 5)
!ec

!bpop
!bc
array([ True,  True,  True,  True,  True,  True,  True,  True,  True,  True], dtype=bool)
!ec
!epop

!bc python
# multiple and logical index operator
(3 < x) & (x < 5)
!ec

!bpop
!bc
array([False, False, False, False,  True, False, False, False, False, False], dtype=bool)
!ec
!epop

!split
===== Multi-Dimensional Arrays (matrices) =====

Numpy has both array classes and a matrix class. The array is a more general object, where the matrix class is specifically for linear algebra. Matrices are only 2-dimensional, which can limit functionality, where the array can be n-dimensional. All matrix operations can be performed on an array, so it is recommended to just use arrays to avoid confusion.

First, to define a 1x3 array
!bc python
c = array([[1,2,3]])
c
!ec

!bpop
!bc
array([[1, 2, 3]])
!ec
!epop


Now the transpose does what we expected to a 3x1 array
!bc python
c.transpose()
!ec

!bpop
!bc
array([[1],
       [2],
       [3]])
!ec
!epop

If we want to define a 3x1 array, we define the array like so
!bc python
c = array( [[1],[2],[3]] )
!ec

!bpop
!bc
array([[1],
       [2],
       [3]])
!ec
!epop

!split
===== Matrix Pitfalls =====

Defining an array is simple but if you are used to Matlab syntax, there could be some confusion. In Matlab, every array(or vector) is at least a (1,1). In python, it is possible to define a (3,), which can be very frustrating if, for example you are interested in transposing your array from a row to a column. Lets take a look.

!bc python
# create a 3 element array
c = array([1,2,3])
c
!ec

!bpop
!bc
array([1, 2, 3])
!ec
!epop

!bc python
c.transpose()
!ec

!bpop
!bc
array([1, 2, 3])
!ec
!epop

That is not what I expected. I thought it would be a column array not, but no. Upon further inspection, welcome to the (3,) dimension array.

!bc python
c.shape
!ec

!bpop
!bc
(3,)
!ec
!epop

This can be addressed in a few ways. The safest solution is to change how the arrays are defined.

!split
===== Matrix Operations =====

lets creat some matrices (but recall use the array)

!bc python
a = array([[1, 2], [3, 4]])
a
!ec

!bpop
!bc
array([[1, 2],
       [3, 4]])
!ec
!epop

!bc python
b = array([[1, 2, 4],[5, 6, 7] ])
b
!ec

!bpop
!bc
array([[1, 2, 4],
       [5, 6, 7]])
!ec
!epop

To perform a matrix multiplication on an array, use the `@`

!bc python
a @ b
!ec

!bpop
!bc
array([[11, 14, 18],
       [23, 30, 40]])
!ec
!epop

To perform element wise operation, use `*`

!bc python
b * 27
!ec

!bpop
!bc
array([[ 27,  54, 108],
       [135, 162, 189]])
!ec
!epop


!split
===== Plotting =====

Finally, to wrap up this scientific computing tutorial, we end with plotting. Sometimes it is difficult to communicate a calculation or understand complex datasets. Graphs and Plots are such an important part of science and engineering that the python science stack comes with a powerful yet simple plotting packaged called *matplotlib*. Plotting can be just as complicated as the calculations, so here is a simple example to get started. Check out the "matplotlib gallery":"http://matplotlib.org/gallery.html" for many more examples.

!bc python
from numpy import *
from matplotlib.pyplot import *
x = linspace(-20,20,100)
plot(x,sin(x)/x)
title('y=sin(x)/x')
savefig('fig/matplotlib.png')
show()
!ec

FIGURE: [fig/matplotlib.png, width=900]


!split
===== Python in Engineering Summary =====

A brief introduction to the python programming language has been presented to demonstrate the capabilities of python for scientific computing applied to physics and engineering. If your curiosity got the better part of you, please check out the following links that I have found very useful in the (ref{sec:reflinks}) section.


!split
===== References and Links =====
label{sec:reflinks}


=== MATLAB vs Python  ===

Other comparisons of python versus MATLAB  <linebreak>
URL:"http://fperez.org/py4science/warts.html" <linebreak>
URL:"http://www.pyzo.org/whypython.html" <linebreak>
URL:"http://www.pyzo.org/python_vs_matlab.html" <linebreak>
URL:"https://www.mathworks.com/products/matlab/matlab-vs-python.html#comparison_table" <linebreak>
URL:"https://docs.scipy.org/doc/numpy-dev/user/numpy-for-matlab-users.html" <linebreak>



=== Python Syntax Cheatsheets ===

"ipython-chetasheet":"https://damontallen.github.io/IPython-quick-ref-sheets/" <linebreak>
"conda-chetasheet":"http://conda.pydata.org/docs/using/cheatsheet.html" <linebreak>
"python for matlab users":"http://mathesaurus.sourceforge.net/matlab-numpy.html" <linebreak>


!split
=== Python Engineering Books ===

"Numerical Python - A Practical Techniques Approach for Industry":"http://www.apress.com/9781484205549" with "source code":"http://www.apress.com/downloadable/download/sample/sample_id/1732/"  <linebreak>
"Elementary Mechanics Using Python":"http://www.springer.com/us/book/9783319195957#aboutBook"   <linebreak>
"A Primer on Scientific Programming With Python":"http://hplgit.github.io/primer.html/doc/web/index.html"  <linebreak>
"Coding the Matrix":"http://codingthematrix.com/" <linebreak>
"Python Scripting for Computational Science":"http://www.springer.com/us/book/9783540739159" <linebreak>
"A Primer on Scientific Programming with Python":"http://www.springer.com/us/book/9783662498866"  with "partial free download":"https://hplgit.github.io/primer.html/doc/pub/half/book.pdf" <linebreak>
"Computation Physics":"http://www-personal.umich.edu/~mejn/computational-physics/" <linebreak>

=== Python Engineering Library Documentation ===

Python has mature scientific computation packages, namely "scipy":"https://www.scipy.org/" <linebreak>

_Scipy_.

"Scipy Cookbook":"http://scipy-cookbook.readthedocs.io/index.html"  <linebreak>
"Scipy Guide":"http://www.davekuhlman.org/scipy_guide_01.html"  <linebreak>
"Scipy Lectures":"http://www.scipy-lectures.org/index.html"   <linebreak>
"Learning Scipy":"https://github.com/rojassergio/Learning-Scipy"   <linebreak>
"Scipy Tutorial":"http://docs.scipy.org/doc/scipy/reference/tutorial/"   <linebreak>

_Numpy_.

"Numpy":"https://wiki.python.org/moin/NumericAndScientific"  <linebreak>
"Official Docs":"https://docs.scipy.org/doc/numpy-dev/contents.html"  <linebreak>
"Numpy for matlab users":"https://docs.scipy.org/doc/numpy-dev/user/numpy-for-matlab-users.html"  <linebreak>
"100 numpy examples":"https://github.com/rougier/numpy-100"  <linebreak>
"numpy on windows":"https://github.com/numpy/numpy/wiki/Numerical-software-on-Windows"  <linebreak>

_Sympy_.

"sympy tutorial":"http://docs.sympy.org/dev/tutorial/intro.html" <linebreak>
"sympy features":"http://www.sympy.org/en/features.html" <linebreak>
"sympy physics":"http://docs.sympy.org/dev/modules/physics/mechanics/" <linebreak>

_Matplotlib_.

"matplotlib gallery":"http://matplotlib.org/gallery.html" and "matplotlib tutorial":"https://github.com/rougier/matplotlib-tutorial"  <linebreak>
"interactive matplotlib":"http://central.scipy.org/item/84/1/simple-interactive-matplotlib-plots" <linebreak>

!split
=== General Python ===

"The Hitchhikers Guide to Python":"http://docs.python-guide.org/en/latest/" <linebreak>
"A very basic introduction to scientific Python programming":"http://hplgit.github.io/bumpy/doc/pub/._basics000.html#table_of_contents"  <linebreak>

=== Python and Excel Spreadsheets ===

"xlwings":"http://www.xlwings.org" <linebreak>
"pandas":"http://pandas.pydata.org" <linebreak>

=== Python Online Courses ===

"scientific-python-lectures":"https://github.com/jrjohansson/scientific-python-lectures"  <linebreak>
"Practical Numerical Methods with Python":"http://openedx.seas.gwu.edu/courses/GW/MAE6286/2014_fall/about" with "source code":"https://github.com/numerical-mooc/numerical-mooc" <linebreak>
"Aerodynamics / Hydrodynamics with Python":"http://openedx.seas.gwu.edu/courses/GW/MAE6226/2014_spring/about" <linebreak>
"Cornell":"http://pages.physics.cornell.edu/~sethna/StatMech/ComputerExercises/PythonSoftware/"  <linebreak>
"Python numerical methods mooc":"http://openedx.seas.gwu.edu/courses/GW/MAE6286/2014_fall/about"  <linebreak>
"Computational Physics with Python":"http://www-personal.umich.edu/~mejn/computational-physics/" <linebreak>
"Coding the Matrix":"http://cs.brown.edu/courses/cs053/current/index.htm" <linebreak>
"How to Think Like a Computer Scientist":"http://interactivepython.org/runestone/static/thinkcspy/index.html" <linebreak>

=== Programming Games ===

"project euler":"https://projecteuler.net/" <linebreak>
"checkio":"https://checkio.org/" <linebreak>
"Numeric Python exercises":"https://github.com/rougier/numpy-100/blob/master/100%20Numpy%20exercises.md" <linebreak>


======= Advanced Tutorials =======

===== Virtual Environments =====

Lets set up our virtual environments with conda. This will allow you to have an isolated environment for different projects. I typically default with the most recent version and create a 2.7 environment.

to check what environments are install type

!bc bash
conda info -e
!ec

To install a full version of python 2.7 with many packages, type

!bc bash
conda create -n py27 python=2.7 anaconda
!ec

In linux activate different environments by
!bc bash
source activate py27
source deactivate
!ec

and in windows
!bc batch
activate py27
deactivate
!ec


!split
===== Converting an ipython notebook to an html document =====
Ipython notebooks can eaily be converted to an html file with the following python code

!bc pycod
get_ipython().system('jupyter nbconvert --to html mechpy.ipynb')
!ec

or, in the OS terminal

!bc batch
jupyter nbconvert --to html mechpy.ipynb
!ec

===== Running jupyter notebook in windows =====
In windows, create a batch file (*.bat) to run a jupyter notebook server in the current directory
!bc batch
:: Use to launch jupyter notebooks
:: change console to the current working directory
Pushd "%~dp0"
:: launch jupyter notebook
jupyter notebook
:: write html output
jupyter nbconvert --to html mechpy.ipynb
pause
!ec



======= Excel and Python - They can be friends =======
Because it's there and everyone uses it
"Automate the boring stuff, python excel scripting":"https://automatetheboringstuff.com/chapter12/"
"Use python intead of VBA with xlwings":"http://xlwings.org/"
"openpyxl":"https://openpyxl.readthedocs.io/en/default/"
"or just develope directly with Windows COM":"http://shop.oreilly.com/product/9781565926219.do"

----------
!split

========= mechpy modules documentation =========

======= composites  =======
label{sec:comp}

specialized code to analyze composite plates using classical laminated plate theory


======= design  =======
label{sec:design}

shear-bending diagrams, assisting hand calculations for stress


======= fem  =======
label{sec:fem}

example code for computing finite element models for analysis and education


======= math  =======
label{sec:math}

various math tools for processing engineering systems


======= statics  =======
label{sec:statics}

code for assisting and checking hand calculations


======= units  =======
label{sec:units}

unit conversion

"sympy units":"http://docs.sympy.org/latest/modules/physics/units.html"


======= catia =======
label{sec:catia}

API code to automate cad in catia using wincom32 module

======= abaqus and abaqus_report =======
label{sec:abaqus}

API code to automate running of finite element models and reporting using python-pptx. Abaqus uses python as its native macro/scripting language, which makes it easy to develop powerful tools that utilize the robustness and simplicity of the python programming language.

===== abaqus documentation =====

Abaqus uses python as its native macro/scripting language, which makes it easy to develop powerful tools that utilize the robustness and simplicity of the python programming language.

This program was designed to generate a dynamic powerpoint presentation based on a user defined odb file. The `abaqus.py` requires and abaqus license and can be run from the abaqus python console within Abaqus CAE. The `abaqus_report.py` has many other modules that are not allowed in Abaqus python. PythonReportTool calls functions located in the AbaqusReportTool.py and can be run in any python console or windows terminal and can be executed by opening a windows command prompt by.

### Advanced operation
In the python console in Abaqus `>>>` , commands can be typed to use parts of *AbaqusReportTool*. To execute specific functions in *AbaqusReportTool*, type:
!bc pyshell
>>>import os
>>>os.chdir('C:/Users/User1/Directory_with_py_files')
>>>import AbaqusReportTool
>>>odbname='bottle_test/bottle_test.odb'  # odb file cannot have spaces in the name or special characters, just letters, numbers hyphens and underscores!
>>>myOdbTest = AbaqusReportTool.AbaqusReportTool(odbname)
!ec
When myOdbTest is loaded, a check is made to determine if the database needs updated, and does so if it does. Also, *>>>* indicates we are in the python console. and will be dropped henceforth

=== A few examples of how to run individual functions ===
!bc pycod
# to see all the functions available
dir(myOdbTest)
#['BE_makeReportData', 'BT_makeReportData', 'CBE_makeReportData', 'HS_makeReportData', 'TL_makeReportData', 'VP_edit', '__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'avi_save', 'clearFiles', 'clearFilesExcept', 'csv_field', 'csv_history', 'csysCyn', 'getMaxField', 'myAssembly', 'myOdb', 'myOdbDat', 'myOdbDat2', 'myOdbVis', 'myOdbs', 'myView', 'myVp', 'png_save', 'png_undeformed', 'replaceElementSets', 'replaceNodeSets', 'rpt_field', 'txt_field_summary', 'txt_history_summary', 'txt_odb_summary', 'xplot_field', 'xplot_history', 'xyList_field', 'xyplot_history']

# to change the viewport to default values of the function, s=0, f=0, o='', c='', csys = '', setsKeyword = '',v='Iso1',myLegend = ON, myState=OFF, myMaxValue = 0, myMinValue = 0)
myOdbTest.VP_edit()

# this code will change the current viewport to step 0,frame 0, object Stress, Component S11, coordinate system default, elementsets all, view Iso1, Legend on, State on, maxvalue auto minvalue auto
myOdbTest.VP_edit(s=0, f=0, o='S', c='S11', csys = '', setsKeyword = '',v='Iso1', myLegend = ON, myState=OFF, myMaxValue = 0, myMinValue = 0)

# to clear all files from the directory except odb and pptx where the odb file resides
myOdbTest.clearFilesExcept(['odb','pptx'])

# to create a text file that describes all the fields in the odb file
myOdbTest.txt_field_summary()

# saves a png of the current viewport
myOdbTest.png_save()
!ec

=== Accessing History Region info using the bottle_test example ===
!bc pycod
myOdbTest.myOdbDat.steps.keys()
# ['pressure']
myStep = myOdbTest.myOdbDat.steps['pressure']
myStep.historyRegions.keys()
# ['Node CATGSD_F_SHAMPOO_BOTTLE_END-1.58', 'Node CATGSD_F_SHAMPOO_BOTTLE_END-1.574']
myRegion=myStep.historyRegions['Node CATGSD_F_SHAMPOO_BOTTLE_END-1.58']
myRegion.historyOutputs.keys()
# ['RF1', 'RF2', 'RF3', 'U1', 'U2', 'U3']
myRegion.historyOutputs['RF1'].description
# 'Reaction force'
# returns a nested tuple of time and the RF1 data
myDat = myRegion.historyOutputs['RF1'].data
# inverts the tuple and unpacks myDat into time and myRF1
time, myRF1  = zip(*myDat)
!ec

=== Extracting Field info ===
!bc pycod
myFieldval = myStep.frames[-1].fieldOutputs['U'].values
myU1 = [myFieldval[k].data[0] for k in range(len(myFieldval))]
!ec

===  Closing the database. even though the database is read-only, it is good practice to close the database ===
!bc pycod
myOdbTest.myOdbDat.close()
!ec

=== Basic Checklist for generating an Abaqus simulation  ===
 o Parts
 o Materials
 o Sections
 o Section Assingments
 o Assembly(instances)
 o Steps (after Initial)
 o BCs (Boundary Conditions)
 o Loads
 o Mesh
 o Jobs

=== launch an abaqus program   ===
!bc batch
abaqus
abq6132se
abaqus doc
abaqus pde      # launches only PDE (python development environment) for abaqus
abaqus cae -pde # launches PDE and abaqus cae
abaqus cae      # launches abaqus cae
abaqus viewer   # launhces abaqus viewer
!ec

=== execute an existing script or open a file ===
!bc batch
abaqus python odb_to_txt.py test1.odb       # runs a abaqus python script with input 'test1.odb'
abaqus cae script=myscript.py               # launches cae and runs script
abaqus cae database=filename.cae            # opens an odb file in cae
abaqus viewer script=myscript.py            # launches viewer and executes script
abaqus viewer database=cantilever           # opens a odb file in the viewer
abaqus cae noGUI=myscript.py                # launches cae and runs script
abaqus viewer noGUI=myscript.py             # launches viewer and executes script
abaqus job=my_sample_job interactive        # executes *.inp file
abaqus job=my_sample_job cpus=8 interactive # executes *.inp file and utilizes 8 cpu cores
!ec

=== executing an abaqus python script passing in variables ===
!bc batch
abaqus cae noGUI=myscript.py -- variable1 variable2
!ec

=== fetch demos ===
!bc batch
abaqus fetch job=beamExample   # fetches the beamExample.py file
abaqus fetch job=gsi_frame_caemodel.py
abaqus cae script=gsi_frame_caemodel.py
!ec

=== Some of the abaqus file types  ===

files generated by created and analyzing a model
 * *rpy* -  replay file , all modeling operation commands executed during a session, are saved in this file
 * *cae* - model database, contains models and analysis jobs
 * *jnl* - journal python file, all commands necessary to recreate the most current save model database
 * *rec* - recover file contains commands to replicate the version of the model database in memory

files created when a job is submitted
 * *inp* - abaqus config file that is created when a job is submitted. contains all the information necessary to run a analysis
 * *odb* - output database containing results from completed simulation. Use the step module output request manager to choose variables are saved at what rate. viewed in the  viualiation module
 * *lck* - file that protects the odb file when it is current being written to
 * *res* - used to continue an anaylsis that stopped before it was complete. use the step module to specify which analysis steps should write restart information
 * *dat* - printed output from the anaylsis input file processor, as well as printed output of selected results written during the analysis.
 * *msg*  - contains diagnostic or informative messages about the progress of the solution. Control the output in the step module
 * *fil*  - contains selected results from the analysis in a neutral format. that can we read/written for third-party post processing
 * *rpt* - text file generated from probe data for user specific user requested information
 * *ods* - scratch output database file
 * *mdb* - database of the model
 * *sim* - binary file
 * *sta* - summary of job info
 * *lck* - a file that indicates that the odb file is open and cannot be edited if opened by another user

=== Outputs ===
* defaults set in the environment file
*  typical outputs
 * E - strain
 * PE - plastic strain
 * U - displacements and rotations
 * RF - reaction forces
 * CF - concentrated (applied) forces and moments
 * CSTRESS - contact stresses
 * CDISP - contact displacements
 * see Abaqus Scripting User's Guide 5.2 for more info accessing the database


=== Abaqus Scripting User's Guide - 5.2.2 ===
field output
* typically requested for the entire model, often only at selected elements
* used for creating contour, deformed shape, and symbol plots
* Can be used as a source for x-y plots, but history is better
* intended for infrequent requests for large portions of model  data, such as 3d mesh contour plots
* can specify output frequency or time intervals

!bc pycod
import odbAccess
session.odbs[name].steps[name].frames[i].fieldOutputs[name]
# or
sdat=session.odbs['customBeamExample/customBeamExample.odb'].steps['beamLoad'].frames[-1].fieldOutputs['S']
integrationPointData = sdat.getSubset(position=INTEGRATION_POINT)
invariantsData = sdat.validInvariants
!ec


Abaqus Scripting User's Guide - 9.3.2
Field output is intended for infrequent requests for a large portion of the model and can be used to generate contour plots, animations, symbol plots, and displaced shape plots in the Visualization module of Abaqus/CAE. You can also use field output to generate an X–Y data plot. Only complete sets of basic variables (for example, all the stress or strain components) can be requested as field output. Field output is composed of a “cloud of data values” (e.g., stress tensors at each integration point for all elements). Each data value has a location, type, and value. You use the regions defined in the model data, such as an element set, to access subsets of the field output data. Figure 9–3 shows the field output data object model within an output database.

history output
* requested for a small subset of the model
* typically requested at every increment during the anaylsis
* used to generate xy plots by step and time
* example -  the principal stress at a single node at the root of the beam

!bc pycod
import odbAccess
session.odbs[name].steps[name].historyRegions[name]
!ec

Abaqus Scripting User's Guide - 9.3.2
History output is output defined for a single point or for values calculated for a portion of the model as a whole, such as energy. History output is intended for relatively frequent output requests for small portions of the model and can be displayed in the form of X–Y data plots in the Visualization module of Abaqus/CAE. Individual variables (such as a particular stress component) can be requested.
Depending on the type of output expected, a HistoryRegion object can be defined for one of the following:
* a node
* an integration point
* a region
* the whole model

The output from all history requests that relate to a particular point or region is then collected in one HistoryRegion object. Figure 9–4 shows the history output data object model within an output database. In contrast to field output, which is associated with a frame, history output is associated with a step.

=== Common Abaqus activities ===

Access the help documentation by typing `abaqus doc` in console or
!bquote
Help -> Search and Browse Guides
!equote


execute a abaqus/python script
!bquote
File -> Run Script
!equote

record a abaqus/python macro, where files are stored in users home directory in `abaqusMacros.py`
!bquote
File -> Macro Manager
!equote

edit and execute a abaqus python script in using the provided python development environment (PDE)
!bquote
File -> Abaqus PDE...
!equote

set default working directory

plugins
!bquote
abaqus_plugins\reportGenerator\htmlReportGeneratorForm.py
!equote

Change font of legend
!bquote
Viewport -> Viewport Annotation Options -> Triad -> Set Font
!equote

=== Abaqus/Python Scripting ===

 Abaqus specific Python modules imports
* Module - Abaqus/CAE functionality
* assembly - The Assembly module
* datum - The Datum toolset
* interaction - The Interaction module
* job - The Job module
* load - The Load module
* material - Materials in the Property module
* mesh - The Mesh module
* part - The Part module
* partition - The Partition toolset
* section - Sections in the Property module
* sketch - The Sketch module
* step - The Step module
* visualization - The Visualization module
* xyPlot - The X–Y toolset

built in abaqus gui example
!bc pycod
from abaqus import getInput
from math import sqrt
number = float(getInput('Enter a number:'))
print sqrt(number)
!ec

!bc pycod
def printCurrentVp(picname = 'file1'):

    from abaqus import session, getInputs
    from abaqusConstants import PNG
    name = getInputs( (('File name:', ''),),
        'Print current viewport to PNG file')[0]
    vp = session.viewports[session.currentViewportName]
    session.printToFile(
        fileName=name, format=PNG, canvasObjects=(vp, ))
!ec


# viewport views
!bc pycod
viewVector    =(0,1,0)  #  x,y,z
cameraUpVector=(0,0,1)

myViewport.view.setValues(session.views['Front'])
myViewport.view.setViewpoint(viewVector=(0,0,1), cameraUpVector=(0,1,0))

myViewport.view.setValues(session.views['Back'])
myViewport.view.setViewpoint(viewVector=(0,0,-1), cameraUpVector=(0,1,0))

myViewport.view.setValues(session.views['Top'])
myViewport.view.setViewpoint(viewVector=(0,1,0), cameraUpVector=(0,0,-1))

myViewport.view.setValues(session.views['Bottom'])
myViewport.view.setViewpoint(viewVector=(0,-1,0), cameraUpVector=(0,0,1))

myViewport.view.setValues(session.views['Left'])
myViewport.view.setViewpoint(viewVector=(-1,0,0), cameraUpVector=(0,1,0))

myViewport.view.setValues(session.views['Right'])
myViewport.view.setViewpoint(viewVector=(1,0,0), cameraUpVector=(0,1,0))

myViewport.view.setValues(session.views['Iso'])
myViewport.view.setViewpoint(viewVector=(1,1,1), cameraUpVector=(0,1,0))

!ec

=== Other random tests from the documentation ===
!bc batch
abaqus fetch job=odbElementConnectivity
abaqus fetch job=viewer_tutorial
abaqus cae odbElementConnectivity.py -- viewer_tutorial.odb
!ec

This document was generated from content in the abaqus documentation as a quick reference guide when using abaqus. To access  this content

!bquote
Help -> Search and Browse` Guides...
!equote


End of *abaqus* documentation


----------
!split

=========  References =========
label{chp:ref}

Hibbler - Statics   <linebreak>
Hibbler - Mechanics of Materials  <linebreak>
Collins et al - Mechanical Design of Machine Elements and Machines  <linebreak>
Flabel - Practical Stress Analysis for Design Engineers  <linebreak>
Peery - Aircraft Structures  <linebreak>
Niu - Airframe Stress Analysis and Sizing <linebreak>

!split
======= Links =======

===== Composites References =====
http://www.doitpoms.ac.uk/tlplib/fibre_composites/

===== Python Engineering Classes =====
"scientific-python-lectures":"https://github.com/jrjohansson/scientific-python-lectures"  <linebreak>
"Practical Numerical Methods with Python":"http://openedx.seas.gwu.edu/courses/GW/MAE6286/2014_fall/about" with "source code":"https://github.com/numerical-mooc/numerical-mooc" <linebreak>
"Aerodynamics / Hydrodynamics with Python":"http://openedx.seas.gwu.edu/courses/GW/MAE6226/2014_spring/about" <linebreak>
"Cornell":"http://pages.physics.cornell.edu/~sethna/StatMech/ComputerExercises/PythonSoftware/"  <linebreak>
"Python numerical methods mooc":"http://openedx.seas.gwu.edu/courses/GW/MAE6286/2014_fall/about"  <linebreak>
"Computational Physics with Python":"http://www-personal.umich.edu/~mejn/computational-physics/" <linebreak>
"Coding the Matrix":"http://cs.brown.edu/courses/cs053/current/index.htm" <linebreak>

===== Python Engineering Books =====

"Numerical Python - A Practical Techniques Approach for Industry":"http://www.apress.com/9781484205549" with "source code":"http://www.apress.com/downloadable/download/sample/sample_id/1732/"  <linebreak>
"Elementary Mechanics Using Python":"http://www.springer.com/us/book/9783319195957#aboutBook"   <linebreak>
"A Primer on Scientific Programming With Python":"http://hplgit.github.io/primer.html/doc/web/index.html"  <linebreak>
"Coding the Matrix":"http://codingthematrix.com/" <linebreak>

===== Python Engineering Libraries =====

=== General Numeric Python ===
Python has mature scientific computation packages, namely "scipy":"https://www.scipy.org/"

__Scipy.__

"Scipy Cookbook":"http://scipy-cookbook.readthedocs.io/index.html"  <linebreak>
"Scipy Guide":"http://www.davekuhlman.org/scipy_guide_01.html"  <linebreak>
"Scipy Lectures":"http://www.scipy-lectures.org/index.html"   <linebreak>
"Learning Scipy":"https://github.com/rojassergio/Learning-Scipy"   <linebreak>
"Scipy Tutorial":"http://docs.scipy.org/doc/scipy/reference/tutorial/"   <linebreak>

__Numpy.__

"Numpy":"https://wiki.python.org/moin/NumericAndScientific"  <linebreak>
"Official Docs":"https://docs.scipy.org/doc/numpy-dev/contents.html"
"Numpy for matlab users":"https://docs.scipy.org/doc/numpy-dev/user/numpy-for-matlab-users.html"  <linebreak>
"100 numpy examples":"https://github.com/rougier/numpy-100"  <linebreak>
"numpy on windows":"https://github.com/numpy/numpy/wiki/Numerical-software-on-Windows"  <linebreak>

__Sympy.__

"sympy tutorial":"http://docs.sympy.org/dev/tutorial/intro.html" <linebreak>
"sympy features":"http://www.sympy.org/en/features.html" <linebreak>
"sympy physics":"http://docs.sympy.org/dev/modules/physics/mechanics/" <linebreak>

__Matplotlib.__
"matplotlib gallery":"http://matplotlib.org/gallery.html" and "matplotlib tutorial":"https://github.com/rougier/matplotlib-tutorial"  <linebreak>
"interactive matplotlib":"http://central.scipy.org/item/84/1/simple-interactive-matplotlib-plots"  <linebreak>


=== Fluids/Aero ===
"aeropy":"http://aeropy.readthedocs.io/en/latest/"   <linebreak>
"NACA airfoils":"https://github.com/dgorissen/naca"   <linebreak>
"aeropython":"https://github.com/barbagroup/AeroPython"  or "aeropython":"http://lorenabarba.com/blog/announcing-aeropython/"  <linebreak>
"pyaero":"http://pyaero.sourceforge.net/"   <linebreak>

=== Mechanics/Composites/Materials ===
"pyply composites":"https://github.com/Rlee13/pyPLY  "   <linebreak>
"sympy classical mechanics":"http://docs.sympy.org/latest/modules/physics/mechanics/index.html"  <linebreak>
"pygear":"http://sourceforge.net/projects/pygear/"   <linebreak>
"AeroComBAT":"https://github.com/bennames/AeroComBAT-Project"
URL:"https://github.com/nagordon/ME701  "  <linebreak>
URL:"https://github.com/nagordon/mcgill_mech_530_selimb  "  <linebreak>
URL:"https://github.com/elainecraigie/MechanicsOfCompositesProject_ECraigie  "   <linebreak>

=== FEM / Math ===
"pynastran":"https://github.com/SteveDoyle2/pynastran/wiki/GUI"   <linebreak>
"grid solvers":"http://pyamg.org/" with "example""https://code.google.com/p/pyamg/wiki/Examples"   <linebreak>
"ode solver":"http://hplgit.github.io/odespy/doc/web/index.html  "   <linebreak>
"differential equations demo":"http://arachnoid.com/IPython/differential_equations.html"   <linebreak>
"DiffyQ":"http://www.usna.edu/Users/math/wdj/_files/documents/teach/sm212/DiffyQ/des-book-2009-11-24.pdf"   <linebreak>
"pycalculix":"http://justinablack.com/pycalculix/"  <linebreak>
"FEniCS tutorial":"http://fenicsproject.org/documentation/tutorial/"   <linebreak>
"SfePy-Simple Finite Elements in Python":"http://sfepy.org/doc-devel/index.html"   <linebreak>
"PyODE":"http://pyode.sourceforge.net/tutorials/tutorial2.html"  <linebreak>
"getfem++":"http://download.gna.org/getfem/html/homepage/"   <linebreak>
"pycalculix":"http://justinablack.com/pycalculix/"   <linebreak>
"Pysimulator":"https://github.com/PySimulator/PySimulator/"   <linebreak>
"pyfem":"http://compmech.lab.asu.edu/data/pyfem.py "  <linebreak>


=== Units ===
"pint units":"http://pint.readthedocs.io/en/0.7.2/"    <linebreak>
"Unum units":"https://pypi.python.org/pypi/Unum" <linebreak>
"quantities":"https://github.com/python-quantities/python-quantities"
"scipy units":"http://docs.sympy.org/latest/modules/physics/units.html"   <linebreak>

=== Dynamics and Control Systems ===
"pyndamics":"https://github.com/bblais/pyndamics"   <linebreak>
"Python for Controls, System Dynamics, and Mechatronics":"http://www.siue.edu/~rkrauss/python_intro.html  "  <linebreak>
"python-control":"https://www.cds.caltech.edu/~murray/wiki/Control_Systems_Library_for_Python  "  <linebreak>
"vibrationdata":"http://www.vibrationdata.com/python/  "  <linebreak>
"CoupledSpringMassSystem":"http://scipy-cookbook.readthedocs.io/"  <linebreak>
"PyDSTool":"http://www.ni.gsu.edu/~rclewley/PyDSTool/FrontPage.html  "   <linebreak>
"python control":"https://github.com/python-control/python-control"   <linebreak>
"pydy":"http://www.pydy.org/" with "examples":"http://nbviewer.jupyter.org/github/pydy/pydy-tutorial-human-standing/tree/online-read/notebooks/"  and "here":"https://github.com/pydy/scipy-2013-mechanics"  <linebreak>

=== Plotting and Visualization ===
"bumpy":"http://hplgit.github.io/bumpy/doc/pub/._bumpy010.html#app:resources   "  <linebreak>
"pygame physics":"http://www.petercollingridge.co.uk/pygame-physics-simulation"  <linebreak>
"Pymunk visualization":"http://www.pymunk.org/en/latest/readme.html" and URL:"http://chipmunk-physics.net/"
"vpython":"http://vpython.org/"  <linebreak>


------------
Neal Gordon, 2016 <linebreak>
Developed using "doconce":"http://hplgit.github.io/doconce/doc/web/" with the "bootstrap theme":"http://getbootstrap.com/" and "github hosting":"https://github.com/"
